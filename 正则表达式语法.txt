正则表达式语法：

优先级
\	转义符
(), (?:), (?=), []	圆括号和方括号
*, +, ?, {n}, {n,}, {n,m}	限定符
^, $, \任何元字符、任何字符	定位点和序列（即：位置和顺序）
|	替换，"或"操作
字符具有高于替换运算符的优先级，使得"m|food"匹配"m"或"food"。若要匹配"mood"或"food"，请使用括号创建子表达式，从而产生"(m|f)ood"。



* 表示前面的一个字符可以出现任意次数

+ 表示前面的一个字符至少出现1次

? 表示前面的一个字符要么出现0次要么出现1次

\s 匹配任何空白符  \S 和\s相反

\w	
匹配字母、数字、下划线。等价于'[A-Za-z0-9_]'。

\W	
匹配非字母、数字、下划线。等价于 '[^A-Za-z0-9_]'。

\d	
匹配一个数字字符。等价于 [0-9]。

\D	
匹配一个非数字字符。等价于 [^0-9]。



(pattern) 匹配pattern并可以被获取匹配

(?:pattern) 匹配pattern但不可以被获取匹配

[xyz] 匹配所包含的任意一个字符
'[abc]' 可以匹配 "plain" 中的 'a'
[^xyz] 匹配未包含的任意字符。 和中括号相反 
'[^abc]' 可以匹配 "plain" 中的'p'、'l'、'i'、'n'。


console=a&ca=666

正向预查
c(?:o)  将得到 co

c(?=o)  将得到 c 是第一个c

c(?!o)  将得到 c 是第二个c


ocnsole=a&aca=666

反向预查
(?:o)c  将得到 oc

(?<=o)c  将得到 c 是第一个c

(?<!o)c  将得到 c 是第二个c


. 匹配任何单字符(换行符\n 除外)

{n} 匹配n次 'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o

{n,} 匹配n次及n以上

{n,m} m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次

<H1>Chapter 1 - 介绍正则表达式</H1>

/<.*>/ 匹配上面所有

/<.*?>/ 匹配HI标签 

+ * 都是贪婪限定符 加个问号变成非贪婪

